[*.cs]
charset = utf-8
csharp_indent_case_contents = true
csharp_indent_labels = flush_left
csharp_indent_switch_labels = true
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_prefer_braces = true:warning
# Would this make you use the default of the wrong type if inheritance is involved?
csharp_prefer_simple_default_expression = true:suggestion
# I don't really care and I doubt anyone does, but consistency is somewhat important.
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_around_binary_operators = before_and_after
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_style_conditional_delegate_call = true:warning
# I don't have a strong opinion yet.
csharp_style_deconstructed_variable_declaration = false:suggestion
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_constructors = when_on_single_line:suggestion
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_methods = when_on_single_line:silent
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
# Will this result in lines that are unpleasantly long?
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent:false
# Inlined declaration makes it harder to see at a glance what variables are in scope.
csharp_style_inlined_variable_declaration = false:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_throw_expression = true:warning
csharp_style_var_elsewhere = false:silent
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = false:silent
dotnet_naming_style.pascal_case_style.capitalization              = pascal_case
dotnet_naming_symbols.constant_fields.applicable_accessibilities  = *
dotnet_naming_symbols.constant_fields.applicable_kinds            = field
dotnet_naming_symbols.constant_fields.required_modifiers          = const
dotnet_sort_system_directives_first = false
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
# Not sure I agree which precedence is obvious.
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion
# Not sure I agree which precedence is obvious.
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:suggestion
# Not sure I agree which precedence is obvious.
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion
# Not sure I agree which precedence is obvious.
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning
dotnet_style_prefer_auto_properties = true:warning
# This is usually going to result in lines that are unpleasantly long, but it's fine for simple expressions.
dotnet_style_prefer_conditional_expression_over_assignment = false:silent
# This is usually going to result in lines that are unpleasantly long, but it's fine for simple expressions.
dotnet_style_prefer_conditional_expression_over_return = false:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = false:silent
dotnet_style_prefer_inferred_tuple_names = false:silent
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_readonly_field = true:warning
# I don't really care and I doubt anyone does, but consistency is somewhat important.
dotnet_style_require_accessibility_modifiers = omit_if_default:suggestion
indent_style = tab
insert_final_newline = true
trim_trailing_whitespace = true
